apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    //这里指定需要统一的依赖版本,这里统一
                    details.useVersion rootProject.ext.android.supportLibVersion
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    api rootProject.ext.dependencies["annotations"]
    api rootProject.ext.dependencies["logger"]

    api rootProject.ext.dependencies["okhttp"]
    api rootProject.ext.dependencies["okio"]
    api rootProject.ext.dependencies["okhttp_interceptor"]

    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["rxandroid2"]
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["retrofit_converter_scalars"]
    api rootProject.ext.dependencies["retrofit_rxjava2_adapter"]
    api rootProject.ext.dependencies["fastjson"]
    testImplementation 'junit:junit:4.12'
}
