apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'//扩展插件，无需findViewById,直接引用布局文件的id即可
apply plugin: 'kotlin-kapt'  //kapt3插件
apply from: 'dependence.gradle'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "cn.jacky.kotlindemo"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        //无需多版本控制，gradle3.0+需要配置这句话
        flavorDimensions "zenchn"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'//, 'x86', 'x86_64'
        }

        //开启blurview支持
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true    // Enable RS support
    }

    // gradle签名配置
    signingConfigs {
        release {
            storeFile file(RELEASE_KEYSTORE_FILE)
            storePassword RELEASE_KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }

        debug {
            storeFile file(DEBUG_KEYSTORE_FILE)
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    repositories {
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }

    // 编译选项
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    //加快gradle编译配置
    dexOptions {
        //是否支持大工程模式
        jumboMode = true
        //进程内执行dex分包
        dexInProcess true
        //使用增量模式构建
//        incremental true
        //最大堆内存
        javaMaxHeapSize "2g"
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 8
    }

    packagingOptions {
        //解决pictureSelector rxjava版本冲突
        exclude 'META-INF/rxjava.properties'
        //解决lib重复报错
        pickFirst 'lib/mips/*'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    //这里指定需要统一的依赖版本,这里统一
                    details.useVersion rootProject.ext.android.supportLibVersion
                }
            }
        }
    }
}
